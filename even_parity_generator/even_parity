`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////

// Even Parity FSM 
// Two-process FSM:
// Sequential block: updates state/out every term ticks
// Combinational block: computes next state (nstate) and temp_out

module even_parity(
    input clk,
  
    output reg [2:0] state,
    input rst,in,   
    output reg out
    );
    
//   clk : clock input
//   rst : synchronous reset (active high)
//   in  : serial data input
//   state : 3-bit current FSM state (A..G) which is connected to LEDs
//   out   : parity output 

    reg [27:0] count=0; //counter of clock divider
    reg [2:0] nstate;   //3-bit nextstate;
    reg temp_out;       //temporary output
    // State encodings
    parameter A=3'b000;
    parameter B=3'b010;
    parameter C=3'b011;
    parameter D=3'b110;
    parameter E=3'b111;
    parameter F=3'b100;
    parameter G=3'b101;
    parameter idle=3'b000;
    

 
always@(posedge clk)
    begin
    
 //reset case initilation  
      
        if(rst) 
        begin
            state<=A;
            out<=0;
            count<= 0;
        end
      
 //state assignment using clock divider (synchronous)    
      
        else 
        begin
            if (count == 28'd150_000_000  )                
                begin
                count   <= 0;
                state<=nstate;
                out<=temp_out;
                end
            
            else
                begin
                count   <= count + 1'b1; 
                end
        end
end
    
//even parity generator(combinational)

always@(*)
    begin
    
    case (state)
    
                   
    A: 
        begin
        if (in==1)        
        nstate=C;
        else  
        nstate=B; 
        temp_out=1'b0;                    
        end
        
    B:
        begin
        if(in==1)
        nstate=E;
        else
        nstate=D;
        temp_out=1'b0;
        end
        
    C:
        begin
        if(in==1)
        nstate=D;
        else
        nstate=E;
        temp_out=1'b0;
          
        end
        
        
     D:
        begin
        if(in==1)
        nstate=G;
        else
        nstate=F;
        temp_out=1'b0;          
        end
        
        
     E:
        begin
        if(in==1)
        nstate=F;
        else
        nstate=G;
        temp_out=1'b0;         
        end
        
     F:
        begin
        if(in==1)
        nstate=A;
        else
        nstate=A;
        temp_out=1'b0;          
        end
       
     G:
        begin
        if(in==1)
        nstate=A;
        else
        nstate=A;
        temp_out=1'b1;         
        end
        
    default:
        nstate=idle;
      
    endcase
 end 
endmodule
