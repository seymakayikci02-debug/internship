/*
 * dmaTest.c
 *
 *  Created on: Mar 1, 2020
 *      Author: VIPIN
 */

#include "xil_printf.h"
#include "xaxidma.h"
#include "xparameters.h"
#include "sleep.h"
#include "xil_cache.h"

u32 checkHalted(u32 baseAddress,u32 offset);

int main(){

	u32 a[] = {1,2,3,4,5,6,7,8};
	u32 b[8];
    u32 status;

	XAxiDma_Config *myDmaConfig;
	XAxiDma myDma;              //myDma is a struct (a software object) that represents one DMA hardware block.

	myDmaConfig = XAxiDma_LookupConfig(XPAR_AXI_DMA_0_BASEADDR);    //“Which DMA device are we talking to?” 
                                                                   //(based on base address).
	status = XAxiDma_CfgInitialize(&myDma, myDmaConfig);            //“Okay, now set up a driver instance 
	if(status != XST_SUCCESS){                                      //for that DMA so I can use it in software.”
		print("DMA initialization failed\n");
		return -1;
	}
    usleep(10);
    while(1){

	print("DMA initialization success..\n");

	status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x4);  //// Check if MM2S (Memory to Stream) channel is halted before transfer


	xil_printf("Status before data transfer %0x\n",status);

	Xil_DCacheFlushRange((UINTPTR)a,8*sizeof(u32));     // Flush cache for source buffer so DDR has updated values

    // Start S2MM (Stream to Memory) transfer: stream → buffer b[]
	status = XAxiDma_SimpleTransfer(&myDma, (UINTPTR)b, 8*sizeof(u32),XAXIDMA_DEVICE_TO_DMA);
    // Start MM2S (Memory to Stream) transfer: buffer a[] → stream       
	status = XAxiDma_SimpleTransfer(&myDma, (UINTPTR)a, 8*sizeof(u32),XAXIDMA_DMA_TO_DEVICE);//typecasting in C/C++
	
    if(status != XST_SUCCESS){
		print("DMA initialization failed\n");
		return -1;
	}
    
    // Poll MM2S channel status register (offset 0x4) until halted=1 again
    status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x4);
    while(status != 1){
    	status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x4);
    }
    
    // Poll S2MM channel status register (offset 0x34) until halted=1 again
    status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x34);
    while(status != 1){
    	status = checkHalted(XPAR_AXI_DMA_0_BASEADDR,0x34);
    }
	print("DMA transfer success..\n");
	
    
    for(int i=0;i<8;i++)
		xil_printf("%0x\n",b[i]);   // Print contents of destination buffer b[] to verify copy worked
    usleep(10);
    }

}


u32 checkHalted(u32 baseAddress,u32 offset){                        // Utility function: read DMA status register & mask halted bit
	u32 status;
	status = (XAxiDma_ReadReg(baseAddress,offset))&XAXIDMA_HALTED_MASK;
	return status;       // 1 = halted, 0 = running
}
